

                    GEM DOS (tm) 1.0 RELEASE NOTES




























                    GEM DOS (tm) 1.0 Release Notes
                    part number 1045-1001-001






























	





                    GEM DOS (tm) 1.0 RELEASE NOTES



This document explains the latest changes to GEM DOS (tm) 1.0 on the
Lisa(tm).  It assumes you are familiar with the information
contained in the GEM DOS (tm) OEM package.

License Issues:
    A single copy license for the MINCE (tm) text editor has
    been purchased for you. Please fill out the owner registration
    card immediately and return it to Mark of the Unicorn.

General Suggestions:

    Use the Install.bat files to build the hard disk. The
    bootable disk #1 MUST BE INSTALLED FIRST. The other
    disks can be installed in any order.

    NOTE: Each diskette will display a "File not Found" 
          message for a file "INST????.BAT". This is an
          artifact of the way the diskettes were duplicated;
          it does not imply an error or oversight.



    To execute the GEM DESKTOP; enter C:\GEMVDI.PRG


Duplication:

    It is not expected that an OEM will actually duplicate
software in the Lisa disk format, We have provided a set of .bat
files that use the command line interpreter to format and
duplicate diskettes. If a suitable format program and disk bios
exists for your target machine, this type of approach should be
acceptable for limited duplication. The files with names in the
form BILD????.bat use the hard disk as a source and the floppy as
a destination. INST????.bat files use a floppy as a source and
the hard disk as a destination. *.prn files are used by both
types of .bat files for a list of filenames to be copied. The
DSKFMT.BAT file formats a floppy and is used frequently. Hard
disk initialization, user messages and abort proceedures, and
directory manipulation are illustrated. No provision is made for
serialization or data comparison between source and destination.

















                                  -2-	




                    GEM DOS (tm) 1.0 RELEASE NOTES



Documentation:
*  The GEM DOS (tm) User's Guide contains descriptions of the       
DISKCOPY and CHKDSK transient commands. These two commands are
not implemented in vsersion 1.0.

*   The C Language Programming Guide has a GEM DOS (tm) supplement        
containing relevant update materials.

*   The supplement to the Kermit manual contains implementation
specific material.


*   The Bios interface information is contained in the following
section of this document rather than in Appendix A of the
Programmer's Guide for Release 1.0.











































                                  -3-	




                    GEM DOS (tm) 1.0 RELEASE NOTES

                            BIOS INTERFACE


System Initialization Sequence :

    1)    Disable interrupts if necessary.

    2)    Perform necessary chip and peripheral initialization to
          put the HW environment in a quiescent state.

    3)    Initialize TRAP #13 vector to the BIOS's handler address.

    4)    Initialize sector buffers similar to the following code:
              char secbuf[4][512];
              BCB bcbx[4];
              BCB *bufl[2];

              bcbx[0].b_link = &bcbx[1];
              bcbx[2].b_link = &bcbx[3];
              bcbx[0].b_bufdrv = -1;
              bcbx[1].b_bufdrv = -1;
              bcbx[2].b_bufdrv = -1;
              bcbx[3].b_bufdrv = -1;
              bcbx[0].b_bufr = &secbuf[0][0];
              bcbx[1].b_bufr = &secbuf[1][0];
              bcbx[2].b_bufr = &secbuf[2][0];
              bcbx[3].b_bufr = &secbuf[3][0];
              bufl[0] = &bcbx[0];           /* fat buffers */
              bufl[1] = &bcbx[2];           /* dir/data buffers */ 

    (The array of BCB pointers, bufl[], which has the linkable
    name _bufl, must be a global label. It will be linked with
    the GEM DOS (tm) object modules.)

    5)    Invoke osinit() (or '_osinit' from assembler).

    6)    Perform BDOS D_SetDrv(default_drive) via TRAP #1.

    7)    If CLI is to be executed normally (that is, loaded from disk
          and executed):


              Perform BDOS
              P_Exec(0,"command.prg","","path=default_path\0")
              via TRAP #1.

    Else, to execute a linked in CLI:


              Include the modules COMA.O and COMMAND.O when
              linking the system.


              Perform BDOS P_Exec(5,"","","") via TRAP #1, which
              returns the address of a partially initialized base
              page.




                                  -4-	




                    GEM DOS (tm) 1.0 RELEASE NOTES

                            BIOS INTERFACE


              Move the address of cli() (that is, _cli) to base page +
              p_tbase (8).

              Perform BDOS P_Exec(4,"","","path=default_path\0").

Linking the CLI with the system image allows new types of media to be 'INIT'ed
from the command line, provided that formatting has already been done.

N.B.
When the system is linked, the label _GSX_ENT will be undefined.  This
    does not affect the operation of the system.


    If the system is to be generated for 68010 (or similar) hardware, the
    module RWA10.O should be used instead of RWA.O.










































                                  -5-	




                    GEM DOS (tm) 1.0 RELEASE NOTES

                            BIOS INTERFACE

Functions

00   Get Memory Parameter Block

    VOID      Get_MPB(p_MPB)
    MPB       *p_MPB;
    {
              Fill in Memory Parameter Block at p_MPB.
    }

01  Character input status

    LONG      Char_In_Stat(handle)
    WORD      handle;
    {
              if (device is ready)
                        return (-1);
              return (0);
    }

02  Character input

    LONG      Char_Input(handle)
    WORD      handle;
    {
              return (character for device 'handle');


03  Character output

    VOID      Char_output(handle, char)
    WORD      handle, char;
    {
              Output 'char' to device 'handle'.  Character may be output
              directly for polled output, or enqued for interrupt driven
              output.
    }

04  Read/Write disk sectors

    LONG      Read_Write_sectors(wrtflg, buffer, count, begin, drive)
    WORD      wrtflg;             /* 0: read, 1: write */
    BYTE      *buffer;            /* address of transfer buffer */
    WORD      count;              /* number of sectors to transfer */
    WORD      begin;              /* beginning sector number */
    WORD      drive;              /* 0: A, 1: B, ... */
    {
              Perform indicated disk operation.

              return (error indication or E_OK);
    }







                                  -6-	




                    GEM DOS (tm) 1.0 RELEASE NOTES

                            BIOS INTERFACE

05  Get/Set exception vector

    LONG      Get_Set_Vector(n, addr)
    WORD      n;                  /* vector number for operation    */
    LONG      addr;               /* address/parameter value        */
    {
              temp = vector[n];

              if (addr != -1L)
                        vector[n] = addr;

              return (temp);
    }

    Extended vectors

    0x101     Critical error handler

              It is the responsibility of the BIOS to invoke the routine at
              this vector whenever a disk related critical error occurs,
              such as write fault, drive not read, etc.

              It is the responsibility of the handler that installs itself
              to save d3-d7/a3-a7 if they are used.  The error number of the
              critical error is a WORD parameter on the stack.

                        To ignore the error, set D0.L to 0 and return.

                        To retry, set D0.L to 0x10000 and return.

                        To abort, move error parameter to D0 and sign extend
                        it to a LONG.

              If the target system is intended to support character based
              (that is, non-GEM related applications), it is the
              responsibility of the BIOS implementor to make the console
              I/O portion of the BIOS re-entrant from this handler
              so that user prompting can be done.

    0x102     Terminate handler

              It is the responsibility of the handler to determine whether
              it should allow the process termination to continue.
              To terminate, simply RTS. Otherwise, 'longjump' back
              into the main code of the process.












                                  -7-	




                    GEM DOS (tm) 1.0 RELEASE NOTES

                            BIOS INTERFACE

06  Get tick info

    LONG      get_ticks()
    {
              return (number of milliseconds per tick);
    }

07  Get BIOS Parameter Block

    BPB       *get_bpb(drive)
    WORD      drive;
    {
              If multiple media types are supported on 'drive',
              determine type of media.

              return(pointer to BPB for this disk);
    }

08  Character output status

    LONG      Char_Out_Stat(handle)
    WORD      handle;
    {
              If (device is ready for output)
                        return (-1);
              return (0);
    }

09  Media change

    LONG      Media_Change(drive)
    WORD      drive;
    {
              if (media has not changed)
                        return (0);
              if (media may have changed)
                        return (1);
              if (media has definitely changed)
                        return (2);
    }

0A  Get drive map

    LONG      Get_Drive_Map()
    {
              return (bit map of accessible drives on system)
    }

    Where bit 0 represents drive A, etc.
    NOTE:  If the BIOS supports logical drives A and B on a single
    physical drive, it should return both bits set if a floppy disk
    is present.






                                  -8-	




                    GEM DOS (tm) 1.0 RELEASE NOTES

                            BIOS INTERFACE

    B         Get/Set shift keys (console)

    LONG      Get_Set_Shift(flag)
    WORD      flag;
    {
              temp = state;

              if (flag != -1)
                        state = flag;

              return (temp);
    }

    The bits in 'flag' are assigned to be:

              0:        Right shift key
              1:        Left shift key
              2:        Control key
              3:        Alt key
              4:        Caps lock key

0C  Character control input

    LONG      Char_Ctl_In(handle, length, buffer)
    WORD      handle, length;
    BYTE      *buffer;
    {
              Read up to 'length' bytes from 'handle's control
              channel into 'buffer.
              Called with 'length' = 0 to determine if
              device accepts control strings.
    }

0D  Character control output

    LONG      Char_Ctl_Out(handle, length, buffer)
    WORD      handle, length;
    BYTE      *buffer;
    {
    Write 'length' bytes to 'handle's control channel from 'buffer'.
    }

0E  Disk control input

    LONG      Disk_Ctl_In(drive, length, buffer)
    WORD      drive, length;
    BYTE      *buffer;
    {
              Read up to 'length' bytes from 'handle's control channel
              into 'buffer'.  Called with 'length' = 0 to determine if
              'handle' accepts control strings.
    }






                                  -9-	




                    GEM DOS (tm) 1.0 RELEASE NOTES

                            BIOS INTERFACE

0F  Disk control output

    LONG      Disk_Ctl_Out(drive, length, buffer)
    WORD      drive, length;
    BYTE      *buffer;
    {
              Write 'length' bytes to 'handle's control
              channel from 'buffer'.
    }

10  Character vector exchange

    LONG      Char_Vec_Exchange(handle, address)
    WORD      handle;
    LONG      address;
    {
              temp = 'handle's old handler address;

              Install 'address' as 'vector's
              new logical interrupt handler.

              return (temp);
    }

     It is not strictly necessary to implement
    this function for CON: in
    the current release of GEM DOS (tm).
Stack format for invocation of character vector handler

    sp+8      LONG (see below)
    sp+4      LONG flags
    sp        LONG return address

    Interpretation of bits in 'flags' LONG:

     0        Packet received
              If this is 1, then the LONG at sp+8 is defined as
              For CON:, AUX:, or PRN:
                        The LONG character info that BIOS
                        function 0x02 would have returned.
              For CLOCK
                        The number of milliseconds since the
                        last tick.
              For MOUSE
                        A pointer to a parameter block that contains:
                                  A BYTE of button status
                                  A BYTE of delta-X
                                  A BYTE of delta-Y










                                 -10-	




                    GEM DOS (tm) 1.0 RELEASE NOTES

                            BIOS INTERFACE

     1        Error
              If no other error status bit is on,
              this is just an error that couldn't be
              described any better with the available
                defined status bits.

         2        Out of paper

         3        Off line

         4        Timeout

         5        Framing error

         6        Parity error

         7-15        RESERVED

        If no packet received and no error then state changed
        on one of the following

        16        Carrier detect

        17        Clear to send

        18-31        RESERVED

Only register A7 must be preserved by a vector handler.

The handler must jump to the next handler in the chain (at the address
returned by the F_IOCtl character vector exchange function), particularly
for the clock tick.


























                                 -11-	




                    GEM DOS (tm) 1.0 RELEASE NOTES

                           REVISION HISTORY

    INITIAL DOCUMENT RELEASE                          AUGUST 15,1985

























































                                 -12-	


