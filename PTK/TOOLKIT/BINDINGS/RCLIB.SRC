/* LIBMAN: CMM: LIB: NAME: RCLIB.C */
/******************************************************************************
 *
 *    Modulname   :  RCLIB.C
 *
 *    Author      :  Robert Schneider
 *    Version     :  1.0
 *    Created     :  April 20, 1989
 *
 *****************************************************************************
 *
 *	-------------------------------------------------------------
 *	GEM Desktop					  Version 3.1
 *	Serial No.  XXXX-0000-654321		  All Rights Reserved
 *	Copyright (C) 1985 - 1989		Digital Research Inc.
 *	-------------------------------------------------------------
 *
 *****************************************************************************/

#include "portab.h"
#include "aes.h"
#include "rclib.h"

/* LIBMAN: SRC: HDR: NAME: RC_EQUAL.C */

/******************************************************************************
 *
 * Tests for two rectangles equal
 *
 ******************************************************************************/

WORD rc_equal(p1, p2)
GRECT FAR *p1;
GRECT FAR *p2;
{
   if ((p1->g_x != p2->g_x) || (p1->g_y != p2->g_y) ||
       (p1->g_w != p2->g_w) || (p1->g_h != p2->g_h))
      return(FALSE);

   return(TRUE);
}

/* LIBMAN: SRC: HDR: NAME: RC_COPY.C */

/******************************************************************************
 *
 * Copy source to destination rectangle
 *
 ******************************************************************************/

VOID rc_copy(psbox, pdbox)
GRECT FAR *psbox;
GRECT FAR *pdbox;
{
   *pdbox = *psbox;  /* ANSI-C allows structure assignment */
}

/* LIBMAN: SRC: HDR: NAME: RC_INTER.C */

#ifndef min
#define min(a,b) (((a) < (b)) ? (a) : (b))
#endif

#ifndef max
#define max(a,b) (((a) > (b)) ? (a) : (b))
#endif

/******************************************************************************
 *
 * Compute intersect of two rectangles
 *
 ******************************************************************************/

WORD rc_intersect(p1, p2)
GRECT FAR *p1;
GRECT FAR *p2;
{
   WORD tx, ty, tw, th;

   tw = min(p2->g_x + p2->g_w, p1->g_x + p1->g_w); 
   th = min(p2->g_y + p2->g_h, p1->g_y + p1->g_h); 
   tx = max(p2->g_x, p1->g_x);   
   ty = max(p2->g_y, p1->g_y);   
   p2->g_x = tx;    
   p2->g_y = ty;   
   p2->g_w = tw - tx;   
   p2->g_h = th - ty;   

   return( (tw > tx) && (th > ty) );   
}

/* LIBMAN: SRC: HDR: NAME: RC_INSID.C */

/******************************************************************************
 *
 * Determine if x,y is in rectangle
 *
 ******************************************************************************/

WORD rc_inside(x, y, pt)
WORD x, y;
GRECT FAR *pt;
{
   if (x < pt->g_x)
      return(FALSE);
   if (y < pt->g_y)
      return(FALSE);
   if (x >= pt->g_x + pt->g_w)
      return(FALSE);
   if (y >= pt->g_y + pt->g_h)
      return(FALSE);

   return(TRUE);
}

/* LIBMAN: SRC: HDR: NAME: RC_GR2AR.C */

/******************************************************************************
 *
 * Convert x,y,w,h to upper left x,y and lower right x,y for raster ops
 *
 ******************************************************************************/

VOID rc_grect_to_array(area, array)
GRECT FAR *area;
WORD FAR *array;
{
   *array++ = area->g_x;
   *array++ = area->g_y;
   *array++ = area->g_x + area->g_w - 1;
   *array = area->g_y + area->g_h - 1;
}
