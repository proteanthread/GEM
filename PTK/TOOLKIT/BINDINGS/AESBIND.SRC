/* LIBMAN: ALL: NAME: AESBIND.C */
/******************************************************************************
 *
 *    Modulname   :  AESBIND.C
 *
 *    Author      :  Lee Lorenzen
 *    Version     :  1.0
 *    Created     :  September 11, 1985
 *
 *    Author      :  MDF
 *    Version     :  1.1
 *    Modified    :  March 11, 1986 - August 26, 1986
 *       Modified for GEM 3.0
 *
 *    Author      :  MDF
 *    Version     :  1.2
 *    Modified    :  Mai 28, 1987
 *       merge source
 *
 *    Author      :  MDF
 *    Version     :  1.3
 *    Modified    :  September 25, 1987
 *       added menu_click
 *
 *    Author      :  Robert Schneider, DR GmbH
 *    Version     :  1.4
 *    Modified    :  April 12, 1989 - April 17, 1989
 *       Cleaned up the whole source for use with new C-Compilers
 *       (Turbo-C 2.0, MS-C 5.1) that do ANSI-C-Prototyping.
 *       Also inserted LIBMAN-Comments to allow users to install
 *       the bindings either as one big source, or splitted in
 *       the Managers-Libraries (appl, evnt, ...), or splitted each
 *       function into a separate source to achieve smallest possible
 *       executable-size.
 *
 *****************************************************************************
 *
 *	-------------------------------------------------------------
 *	GEM Desktop					  Version 3.1
 *	Serial No.  XXXX-0000-654321		  All Rights Reserved
 *	Copyright (C) 1985 - 1989		Digital Research Inc.
 *	-------------------------------------------------------------
 *
 *****************************************************************************/

#include "portab.h"
#include "aes.h"
#include "aesbind.h"

#define CTRL_CNT	4		/*mike's version is 3*/

GLOBAL BYTE ctrl_cnts[] =
{
/* Application Manager		*/
	0, 1, 0, 			/* func 010		*/
	2, 1, 1, 			/* func 011		*/
	2, 1, 1, 			/* func 012		*/
	0, 1, 1, 			/* func 013		*/
	2, 1, 1, 			/* func 014		*/
	1, 1, 1, 			/* func 015		*/
	2, 1, 0, 			/* func 016		*/
	0, 0, 0, 			/* func 017		*/
	0, 0, 0, 			/* func 008		*/
	0, 1, 0, 			/* func 019		*/
/* Event Manager		*/
	0, 1, 0, 			/* func 020		*/
	3, 5, 0, 			/* func 021		*/
	5, 5, 0, 			/* func 022		*/
	0, 1, 1, 			/* func 023		*/
	2, 1, 0, 			/* func 024		*/
	16, 7, 1,	 		/* func 025		*/
	2, 1, 0, 			/* func 026		*/
	0, 0, 0, 			/* func 027		*/
	0, 0, 0, 			/* func 028		*/
	0, 0, 0, 			/* func 009		*/
/* Menu Manager			*/
	1, 1, 1, 			/* func 030		*/
	2, 1, 1, 			/* func 031		*/
	2, 1, 1, 			/* func 032		*/
	2, 1, 1, 			/* func 033		*/
	1, 1, 2, 			/* func 034		*/
	1, 1, 1, 			/* func 005		*/
	1, 1, 0, 			/* func 006		*/
	2, 1, 0, 			/* func 007		*/
	0, 0, 0, 			/* func 008		*/
	0, 0, 0, 			/* func 009		*/
/* Object Manager		*/
	2, 1, 1, 			/* func 040		*/
	1, 1, 1, 			/* func 041		*/
	6, 1, 1, 			/* func 042		*/
	4, 1, 1, 			/* func 043		*/
	1, 3, 1, 			/* func 044		*/
	2, 1, 1, 			/* func 045		*/
	4, 2, 1, 			/* func 046		*/
	8, 1, 1, 			/* func 047		*/
	0, 0, 0, 			/* func 048		*/
	0, 0, 0, 			/* func 049		*/
/* Form Manager			*/
	1, 1, 1, 			/* func 050		*/
	9, 1, 0, 			/* func 051 		*/
	1, 1, 1, 			/* func 002		*/
	1, 1, 0, 			/* func 003		*/
	0, 5, 1, 			/* func 004		*/
	3, 3, 1, 			/* func 005		*/
	2, 2, 1, 			/* func 006		*/
	0, 0, 0, 			/* func 007		*/
	0, 0, 0, 			/* func 008		*/
	0, 0, 0, 			/* func 009		*/
/* Process Manager		*/
	0, 0, 0, 			/* func 060		*/
	0, 0, 0, 			/* func 061		*/
	0, 0, 0, 			/* func 062		*/
	0, 0, 0, 			/* func 063		*/
	0, 0, 0, 			/* func 064		*/
	0, 0, 0, 			/* func 065		*/
	0, 0, 0, 			/* func 066		*/
	0, 0, 0, 			/* func 067		*/
	0, 0, 0, 			/* func 008		*/
	0, 0, 0, 			/* func 009		*/
/* Graphics Manager	*/
	4, 3, 0, 			/* func 070		*/
	8, 3, 0, 			/* func 071		*/
	6, 1, 0, 			/* func 072		*/
	8, 1, 0, 			/* func 073		*/
	8, 1, 0, 			/* func 074		*/
	4, 1, 1, 			/* func 075		*/
	3, 1, 1, 			/* func 076		*/
	0, 5, 0, 			/* func 077		*/
	1, 1, 1, 			/* func 078		*/
	0, 5, 0, 			/* func 009		*/
/* Scrap Manager		*/
	0, 1, 1, 			/* func 080		*/
	0, 1, 1, 			/* func 081		*/
	0, 1, 0, 			/* func 082		*/
	0, 0, 0, 			/* func 083		*/
	0, 0, 0, 			/* func 084		*/
	0, 0, 0, 			/* func 005		*/
	0, 0, 0, 			/* func 006		*/
	0, 0, 0, 			/* func 007		*/
	0, 0, 0, 			/* func 008		*/
	0, 0, 0, 			/* func 009		*/
/* fseler Manager		*/
	0, 2, 2, 			/* func 090		*/
	0, 0, 0, 			/* func 091		*/
	0, 0, 0, 			/* func 092		*/
	0, 0, 0, 			/* func 003		*/
	0, 0, 0, 			/* func 004		*/
	0, 0, 0, 			/* func 005		*/
	0, 0, 0, 			/* func 006		*/
	0, 0, 0, 			/* func 007		*/
	0, 0, 0, 			/* func 008		*/
	0, 0, 0, 			/* func 009		*/
/* Window Manager		*/
	5, 1, 0, 			/* func 100		*/
	5, 1, 0, 			/* func 101		*/
	1, 1, 0, 			/* func 102		*/
	1, 1, 0, 			/* func 103		*/
	2, 5, 0, 			/* func 104		*/
	6, 1, 0, 			/* func 105		*/
	2, 1, 0, 			/* func 106		*/
	1, 1, 0, 			/* func 107		*/
	6, 5, 0, 			/* func 108		*/
	0, 0, 0, 			/* func 009		*/
/* Resource Manager		*/
	0, 1, 1, 			/* func 110		*/
	0, 1, 0, 			/* func 111		*/
	2, 1, 0, 			/* func 112		*/
	2, 1, 1, 			/* func 113		*/
	1, 1, 1, 			/* func 114		*/
	0, 0, 0, 			/* func 115		*/
	0, 0, 0, 			/* func 006		*/
	0, 0, 0, 			/* func 007		*/
	0, 0, 0, 			/* func 008		*/
	0, 0, 0, 			/* func 009		*/
/* Shell Manager		*/
	0, 1, 2, 			/* func 120		*/
	3, 1, 2, 			/* func 121		*/
	1, 1, 1, 			/* func 122		*/
	1, 1, 1, 			/* func 123		*/
	0, 1, 1, 			/* func 124		*/
	0, 1, 2, 			/* func 125		*/
	0, 1, 2, 			/* func 126		*/
	0, 1, 2, 			/* func 127		*/
	0, 0, 0, 			/* func 008		*/
	0, 0, 0, 			/* func 009		*/
/* Extended Graphics Manager	*/
	6, 6, 0,			/* func 130		*/
	9, 1, 0,			/* func 131		*/
	0, 0, 0,			/* func 132		*/
	0, 0, 0,			/* func 133		*/
	0, 0, 0,			/* func 134		*/
	0, 0, 0,			/* func 135		*/
	0, 0, 0,			/* func 136		*/
	0, 0, 0,			/* func 137		*/
	0, 0, 0,			/* func 138		*/
	0, 0, 0 			/* func 139		*/
};

GLOBAL UWORD     control[C_SIZE];
GLOBAL UWORD     global[G_SIZE];
GLOBAL UWORD     int_in[I_SIZE];
GLOBAL UWORD     int_out[O_SIZE];
GLOBAL VOID FAR *addr_in[AI_SIZE];
GLOBAL VOID FAR *addr_out[AO_SIZE];

typedef struct gemblkstr
{

   UWORD  FAR  *gb_pcontrol;
   UWORD  FAR  *gb_pglobal;
   UWORD  FAR  *gb_pintin;
   UWORD  FAR  *gb_pintout;
   VOID   FAR * FAR *gb_padrin;
   VOID   FAR * FAR *gb_padrout;		

} GEMBLK;

GLOBAL GEMBLK  gb = {

   control,
   global,
   int_in,
   int_out,
   addr_in,
   addr_out

};

WORD gem _((GEMBLK FAR *ad_g));

WORD gem_if(opcode)
WORD opcode;
{
   WORD i;
   BYTE *pctrl;

   control[0] = opcode;

   pctrl = &ctrl_cnts[(opcode - 10) * 3];
   for(i = 1; i <= CTRL_CNT; i++)
      control[i] = *pctrl++;

   gem((GEMBLK FAR *)&gb);

   return((WORD) RET_CODE );
}

#if HIGH_C

#include <msdos.cf>

MLOCAL WORD gem(ad_g)
GEMBLK FAR *ad_g;
{
   Registers.CX.R = 200;
   Registers.ES.R = FPSEG(ad_g);
   Registers.BX.R = FPOFF(ad_g);

   callint(0xef);
}

#else /* if HIGH_C */

/*
 * Turbo-C and MS-C allow to interrupt by a C-function.
 * So let's do this, to avoid inexperienced users asking
 * for how to use the assembler-interface.
 */
#include <dos.h>                       

MLOCAL WORD gem(ad_g)
GEMBLK FAR *ad_g;
{
   union REGS regs;
   struct SREGS segregs;

   regs.x.cx = 200;
   segregs.es = FPSEG(ad_g);
   regs.x.bx =  FPOFF(ad_g);

   int86x(0xef,&regs,&regs,&segregs);
}

#endif /* if HIGH_C */

/* LIBMAN: LIB: HDR: NAME: APPL.C */

/* 
 * Application Manager
 */

/* LIBMAN: SRC: HDR: NAME: AP_INIT.C */

WORD appl_init()
{
   gem_if(APPL_INIT);

   return((WORD) RET_CODE );
}

/* LIBMAN: SRC: HDR: NAME: AP_EXIT.C */

WORD appl_exit()
{
   gem_if(APPL_EXIT);

   return( TRUE );
}

/* LIBMAN: SRC: HDR: NAME: AP_WRITE.C */

WORD appl_write(rwid, length, pbuff)
WORD rwid;
WORD length;
VOID FAR *pbuff;
{
   AP_RWID     = rwid;
   AP_LENGTH   = length;
   AP_PBUFF    = pbuff;

   return( gem_if(APPL_WRITE) );
}

/* LIBMAN: SRC: HDR: NAME: AP_READ.C */

WORD appl_read(rwid, length, pbuff)
WORD rwid;
WORD length;
VOID FAR *pbuff;
{
   AP_RWID     = rwid;
   AP_LENGTH   = length;
   AP_PBUFF    = pbuff;

   return( gem_if(APPL_READ) );
}

/* LIBMAN: SRC: HDR: NAME: AP_FIND.C */

WORD appl_find(pname)
BYTE FAR *pname;
{
   AP_PNAME = pname;

   return( gem_if(APPL_FIND) );
}

/* LIBMAN: SRC: HDR: NAME: AP_TPLAY.C */

WORD appl_tplay(tbuffer, tlength, tscale)
VOID FAR *tbuffer;
WORD tlength;
WORD tscale;
{
   AP_TBUFFER = tbuffer;
   AP_TLENGTH = tlength;
   AP_TSCALE  = tscale;

   return( gem_if(APPL_TPLAY) );
}

/* LIBMAN: SRC: HDR: NAME: AP_TREC.C */

WORD appl_trecord(tbuffer, tlength)
VOID FAR *tbuffer;
WORD tlength;
{
   AP_TBUFFER = tbuffer;
   AP_TLENGTH = tlength;

   return( gem_if(APPL_TRECORD) );
}

/* LIBMAN: SRC: HDR: NAME: AP_BVSET.C */

WORD appl_bvset(bvdisk, bvhard)
UWORD bvdisk;
UWORD bvhard;
{
   AP_BVDISK = bvdisk;
   AP_BVHARD = bvhard;

   return( gem_if(APPL_BVSET) );
}

/* LIBMAN: SRC: HDR: NAME: AP_YIELD.C */

VOID appl_yield()
{
   gem_if(APPL_YIELD);
}

/* LIBMAN: LIB: HDR: NAME: EVNT.C */

/* 
 * Event Manager
 */

/* LIBMAN: SRC: HDR: NAME: EV_KEYBD.C */

UWORD evnt_keybd()
{
   return((UWORD) gem_if(EVNT_KEYBD) );
}

/* LIBMAN: SRC: HDR: NAME: EV_BUTTN.C */

WORD evnt_button(clicks, mask, state, pmx, pmy, pmb, pks)
WORD clicks;
UWORD mask;
UWORD state;
WORD FAR *pmx;
WORD FAR *pmy;
WORD FAR *pmb;
WORD FAR *pks;
{
   B_CLICKS = clicks;
   B_MASK   = mask;
   B_STATE  = state;

   gem_if(EVNT_BUTTON);

   *pmx = EV_MX;
   *pmy = EV_MY;
   *pmb = EV_MB;
   *pks = EV_KS;

   return((WORD) RET_CODE);
}

/* LIBMAN: SRC: HDR: NAME: EV_MOUSE.C */

WORD evnt_mouse(flags, x, y, width, height, pmx, pmy, pmb, pks)
WORD flags, x, y, width, height;
WORD FAR *pmx;
WORD FAR *pmy;
WORD FAR *pmb;
WORD FAR *pks;
{
   MO_FLAGS  = flags;
   MO_X      = x;
   MO_Y      = y;
   MO_WIDTH  = width;
   MO_HEIGHT = height;

   gem_if(EVNT_MOUSE);

   *pmx = EV_MX;
   *pmy = EV_MY;
   *pmb = EV_MB;
   *pks = EV_KS;

   return((WORD) RET_CODE);
}

/* LIBMAN: SRC: HDR: NAME: EV_MESAG.C */

WORD evnt_mesag(pbuff)
WORD FAR *pbuff;
{
   ME_PBUFF = pbuff;

   return( gem_if(EVNT_MESAG) );
}

/* LIBMAN: SRC: HDR: NAME: EV_TIMER.C */

WORD evnt_timer(locnt, hicnt)
UWORD locnt, hicnt;
{
   T_LOCOUNT = locnt;
   T_HICOUNT = hicnt;

   return( gem_if(EVNT_TIMER) );
}

/* LIBMAN: SRC: HDR: NAME: EV_MULTI.C */

WORD evnt_multi(flags, bclk, bmsk, bst, m1flags, m1x, m1y, m1w, m1h, 
               m2flags, m2x, m2y, m2w, m2h, mepbuff,
               tlc, thc, pmx, pmy, pmb, pks, pkr, pbr )
UWORD flags, bclk, bmsk, bst;
UWORD m1flags, m1x, m1y, m1w, m1h;
UWORD m2flags, m2x, m2y, m2w, m2h;
WORD FAR *mepbuff;
UWORD tlc, thc;
WORD FAR *pmx;
WORD FAR *pmy;
WORD FAR *pmb;
WORD FAR *pks;
UWORD FAR *pkr;
WORD FAR *pbr;
{
   MU_FLAGS = flags;

   MB_CLICKS = bclk;
   MB_MASK = bmsk;
   MB_STATE = bst;

   MMO1_FLAGS = m1flags;
   MMO1_X = m1x;
   MMO1_Y = m1y;
   MMO1_WIDTH = m1w;
   MMO1_HEIGHT = m1h;

   MMO2_FLAGS = m2flags;
   MMO2_X = m2x;
   MMO2_Y = m2y;
   MMO2_WIDTH = m2w;
   MMO2_HEIGHT = m2h;

   MME_PBUFF = mepbuff;

   MT_LOCOUNT = tlc;
   MT_HICOUNT = thc;

   gem_if(EVNT_MULTI);

   *pmx = EV_MX;
   *pmy = EV_MY;
   *pmb = EV_MB;
   *pks = EV_KS;
   *pkr = EV_KRET;
   *pbr = EV_BRET;

   return((WORD) RET_CODE );
}

/* LIBMAN: SRC: HDR: NAME: EV_DCLCK.C */

WORD evnt_dclick(rate, setit)
WORD rate, setit;
{
   EV_DCRATE  = rate;
   EV_DCSETIT = setit;

   return( gem_if(EVNT_DCLICK) );
}

/* LIBMAN: LIB: HDR: NAME: MENU.C */

/* 
 * Menu Manager
 */

/* LIBMAN: SRC: HDR: NAME: MN_BAR.C */

WORD menu_bar(tree, showit)
OBJECT FAR *tree;
WORD showit;
{
   MM_ITREE = tree;
   SHOW_IT  = showit;

   return( gem_if(MENU_BAR) );
}

/* LIBMAN: SRC: HDR: NAME: MN_ICHCK.C */

WORD menu_icheck(tree, itemnum, checkit)
OBJECT FAR *tree;
WORD itemnum, checkit;
{
   MM_ITREE = tree;
   ITEM_NUM = itemnum;
   CHECK_IT = checkit;

   return( gem_if(MENU_ICHECK) );
}

/* LIBMAN: SRC: HDR: NAME: MN_IENAB.C */

WORD menu_ienable(tree, itemnum, enableit)
OBJECT FAR *tree;
WORD itemnum, enableit;
{
   MM_ITREE  = tree;
   ITEM_NUM  = itemnum;
   ENABLE_IT = enableit;

   return( gem_if(MENU_IENABLE) );
}

/* LIBMAN: SRC: HDR: NAME: MN_TNORM.C */

WORD menu_tnormal(tree, titlenum, normalit)
OBJECT FAR *tree;
WORD titlenum, normalit;
{
   MM_ITREE  = tree;
   TITLE_NUM = titlenum;
   NORMAL_IT = normalit;

   return( gem_if( MENU_TNORMAL ) );
}

/* LIBMAN: SRC: HDR: NAME: MN_TEXT.C */

WORD menu_text(tree, inum, ptext)
OBJECT FAR *tree;
WORD inum;
BYTE FAR *ptext;
{
   MM_ITREE = tree;
   ITEM_NUM = inum;
   MM_PTEXT = ptext;

   return( gem_if( MENU_TEXT ) );
}

/* LIBMAN: SRC: HDR: NAME: MN_REGIS.C */

WORD menu_register(pid, pstr)
WORD pid;
BYTE FAR *pstr;
{
   MM_PID  = pid;
   MM_PSTR = pstr;

   return( gem_if( MENU_REGISTER ) );
}

/* LIBMAN: SRC: HDR: NAME: MN_UNREG.C */

WORD menu_unregister(mid)
WORD mid;
{
   MM_MID = mid;

   return( gem_if( MENU_UNREGISTER ) );
}

/* LIBMAN: SRC: HDR: NAME: MN_CLICK.C */

WORD menu_click(click, setit)
WORD click, setit;
{
   MN_CLICK = click;
   MN_SETIT = setit;

   return( gem_if( MENU_CLICK ));
}

/* LIBMAN: LIB: HDR: NAME: OBJC.C */

/* 
 * Object Manager
 */

/* LIBMAN: SRC: HDR: NAME: OB_ADD.C */

WORD objc_add(tree, parent, child)
OBJECT FAR *tree;
WORD parent, child;
{
   OB_TREE   = tree;
   OB_PARENT = parent;
   OB_CHILD  = child;

   return( gem_if( OBJC_ADD ) );
}

/* LIBMAN: SRC: HDR: NAME: OB_DEL.C */

WORD objc_delete(tree, delob)
OBJECT FAR *tree;
WORD delob;
{
   OB_TREE  = tree;
   OB_DELOB = delob;

   return( gem_if( OBJC_DELETE ) );
}

/* LIBMAN: SRC: HDR: NAME: OB_DRAW.C */

WORD objc_draw(tree, drawob, depth, xc, yc, wc, hc)
OBJECT FAR *tree;
WORD drawob, depth;
WORD xc, yc, wc, hc;
{
   OB_TREE   = tree;
   OB_DRAWOB = drawob;
   OB_DEPTH  = depth;
   OB_XCLIP  = xc;
   OB_YCLIP  = yc;
   OB_WCLIP  = wc;
   OB_HCLIP  = hc;

   return( gem_if( OBJC_DRAW ) );
}

/* LIBMAN: SRC: HDR: NAME: OB_FIND.C */

WORD objc_find(tree, startob, depth, mx, my)
OBJECT FAR *tree;
WORD startob, depth, mx, my;
{
   OB_TREE    = tree;
   OB_STARTOB = startob;
   OB_DEPTH   = depth;
   OB_MX      = mx;
   OB_MY      = my;

   return( gem_if( OBJC_FIND ) );
}

/* LIBMAN: SRC: HDR: NAME: OB_ORDER.C */

WORD objc_order(tree, mov_obj, newpos)
OBJECT FAR *tree;
WORD mov_obj, newpos;
{
   OB_TREE   = tree;
   OB_OBJ    = mov_obj;
   OB_NEWPOS = newpos;

   return( gem_if( OBJC_ORDER ) );
}

/* LIBMAN: SRC: HDR: NAME: OB_OFFS.C */

WORD objc_offset(tree, obj, poffx, poffy)
OBJECT FAR *tree;
WORD obj;
WORD FAR *poffx;
WORD FAR *poffy;
{
   OB_TREE = tree;
   OB_OBJ  = obj;

   gem_if(OBJC_OFFSET);

   *poffx = OB_XOFF;
   *poffy = OB_YOFF;

   return((WORD) RET_CODE );
}

/* LIBMAN: SRC: HDR: NAME: OB_EDIT.C */

WORD objc_edit(tree, obj, inchar, idx, kind)
OBJECT FAR *tree;
WORD obj;
WORD inchar;
WORD FAR *idx;
WORD kind;
{
   OB_TREE = tree;
   OB_OBJ  = obj;
   OB_CHAR = inchar;
   OB_IDX  = *idx;
   OB_KIND = kind;

   gem_if( OBJC_EDIT );

   *idx = OB_ODX;

   return((WORD) RET_CODE );
}

/* LIBMAN: SRC: HDR: NAME: OB_CHANGE.C */

WORD objc_change(tree, drawob, depth, xc, yc, wc, hc, newstate, redraw)
OBJECT FAR *tree;
WORD drawob, depth;
WORD xc, yc, wc, hc;
WORD newstate, redraw;
{
   OB_TREE     = tree;
   OB_DRAWOB   = drawob;
   OB_DEPTH    = depth;
   OB_XCLIP    = xc;
   OB_YCLIP    = yc;
   OB_WCLIP    = wc;
   OB_HCLIP    = hc;
   OB_NEWSTATE = newstate;
   OB_REDRAW   = redraw;

   return( gem_if( OBJC_CHANGE ) );
}

/* LIBMAN: LIB: HDR: NAME: FORM.C */

/* 
 * Form Manager
 */

/* LIBMAN: SRC: HDR: NAME: FM_DO.C */

WORD form_do(form, start)
OBJECT FAR *form;
WORD start;
{
   FM_FORM  = form;
   FM_START = start;

   return( gem_if( FORM_DO ) );
}

/* LIBMAN: SRC: HDR: NAME: FM_DIAL.C */

EXTERN VOID graf_growbox();
EXTERN VOID graf_shrinkbox();

WORD form_dial(dtype, ix, iy, iw, ih, x, y, w, h)
WORD dtype;
WORD ix, iy, iw, ih;
WORD x, y, w, h;
{
   if (dtype == FMD_GROW)
   {
      graf_growbox(ix, iy, iw, ih, x, y, w,h);
      return(0);
   }

   if (dtype == FMD_SHRINK)
   {
      graf_shrinkbox(ix, iy, iw, ih, x, y, w,h);
      return(0);
   }

   FM_TYPE = dtype;
   FM_IX   = ix;
   FM_IY   = iy;
   FM_IW   = iw;
   FM_IH   = ih;
   FM_X    = x;
   FM_Y    = y;
   FM_W    = w;
   FM_H    = h;

   return( gem_if( FORM_DIAL ) );
}

/* LIBMAN: SRC: HDR: NAME: FM_ALERT.C */

WORD form_alert(defbut, astring)
WORD defbut;
BYTE FAR *astring;
{
   FM_DEFBUT  = defbut;
   FM_ASTRING = astring;

   return( gem_if( FORM_ALERT ) );
}

/* LIBMAN: SRC: HDR: NAME: FM_ERROR.C */

WORD form_error(errnum)
WORD errnum;
{
   FM_ERRNUM = errnum;

   return( gem_if( FORM_ERROR ) );
}

/* LIBMAN: SRC: HDR: NAME: FM_CENT.C */

WORD form_center(tree, pcx, pcy, pcw, pch)
OBJECT FAR *tree;
WORD FAR *pcx;
WORD FAR *pcy;
WORD FAR *pcw;
WORD FAR *pch;
{
   FM_FORM = tree;

   gem_if(FORM_CENTER);

   *pcx = FM_XC;
   *pcy = FM_YC;
   *pcw = FM_WC;
   *pch = FM_HC;

   return((WORD) RET_CODE );
}

/* LIBMAN: SRC: HDR: NAME: FM_KEYBD.C */

WORD form_keybd(form, obj, nxt_obj, thechar, pnxt_obj, pchar)
OBJECT FAR *form;
WORD obj;
WORD nxt_obj;
UWORD thechar;
WORD FAR *pnxt_obj;
UWORD FAR *pchar;
{
   FM_FORM   = form;
   FM_OBJ    = obj;
   FM_INXTOB = nxt_obj;
   FM_ICHAR  = thechar;

   gem_if( FORM_KEYBD );

   *pnxt_obj = FM_ONXTOB;
   *pchar    = FM_OCHAR;

   return((WORD) RET_CODE );
}

/* LIBMAN: SRC: HDR: NAME: FM_BUTTN.C */

WORD form_button(form, obj, clks, pnxt_obj)
OBJECT FAR *form;
WORD obj;
WORD clks;
WORD FAR *pnxt_obj;
{
   FM_FORM = form;
   FM_OBJ  = obj;
   FM_CLKS = clks;

   gem_if( FORM_BUTTON );

   *pnxt_obj = FM_ONXTOB;

   return((WORD) RET_CODE );
}

/* LIBMAN: LIB: HDR: NAME: GRAF.C */
/* LIBMAN: SRC: HDR: NAME: GF_GROW.C */

/*
 * Graphics Manager 
 */

/*
 * The following two routines, graf_growbox and graf_shrinkbox are
 * placed here for compatability with previous releases since they
 * are no longer directly supported by the AES.
 */

VOID graf_growbox(orgx, orgy, orgw, orgh, x, y, w, h)
WORD orgx, orgy, orgw, orgh;
WORD x, y, w, h;
{
   WORD  cx, cy, cnt, xstep, ystep;

   xgrf_stepcalc(orgw, orgh, x, y, w, h, &cx, &cy, &cnt, &xstep, &ystep);
   graf_mbox(orgw, orgh, orgx, orgy, cx, cy);
   xgrf_2box(cx, cy, orgw, orgh, TRUE, cnt, xstep, ystep, TRUE);
}

/* LIBMAN: SRC: HDR: NAME: GF_SHRNK.C */

VOID graf_shrinkbox(orgx, orgy, orgw, orgh, x, y, w, h)
WORD orgx, orgy, orgw, orgh;
WORD x, y, w, h;
{
   WORD cx, cy, cnt, xstep, ystep;
	
   xgrf_stepcalc(orgw, orgh, x, y, w, h, &cx, &cy, &cnt, &xstep, &ystep);
   xgrf_2box(x, y, w, h, TRUE, cnt, -xstep, -ystep, TRUE);
   graf_mbox(orgw, orgh, cx, cy, orgx, orgy);
}

/* LIBMAN: SRC: HDR: NAME: GF_RUBB.C */

WORD graf_rubbox(xorigin, yorigin, wmin, hmin, pwend, phend)
WORD xorigin, yorigin;
WORD wmin, hmin;
WORD FAR *pwend;
WORD FAR *phend;
{
   GR_I1 = xorigin;
   GR_I2 = yorigin;
   GR_I3 = wmin;
   GR_I4 = hmin;

   gem_if( GRAF_RUBBOX );

   *pwend = GR_O1;
   *phend = GR_O2;

   return((WORD) RET_CODE );
}

/* LIBMAN: SRC: HDR: NAME: GF_DRAG.C */

WORD graf_dragbox(w, h, sx, sy, xc, yc, wc, hc, pdx, pdy)
WORD w, h;
WORD sx, sy;
WORD xc, yc, wc, hc;
WORD FAR *pdx;
WORD FAR *pdy;
{
   GR_I1 = w;
   GR_I2 = h;
   GR_I3 = sx;
   GR_I4 = sy;
   GR_I5 = xc;
   GR_I6 = yc;
   GR_I7 = wc;
   GR_I8 = hc;

   gem_if( GRAF_DRAGBOX );

   *pdx = GR_O1;
   *pdy = GR_O2;

   return((WORD) RET_CODE );
}

/* LIBMAN: SRC: HDR: NAME: GF_MBOX.C */

WORD graf_mbox(w, h, srcx, srcy, dstx, dsty)
WORD w, h;
WORD srcx, srcy, dstx, dsty;
{
   GR_I1 = w;
   GR_I2 = h;
   GR_I3 = srcx;
   GR_I4 = srcy;
   GR_I5 = dstx;
   GR_I6 = dsty;

   return( gem_if( GRAF_MBOX ) );
}

/* LIBMAN: SRC: HDR: NAME: GF_WATCH.C */

WORD graf_watchbox(tree, obj, instate, outstate)
OBJECT FAR *tree;
WORD obj;
WORD instate, outstate;
{
   GR_TREE     = tree;
   GR_OBJ      = obj;
   GR_INSTATE  = instate;
   GR_OUTSTATE = outstate;

   return( gem_if( GRAF_WATCHBOX ) );
}

/* LIBMAN: SRC: HDR: NAME: GF_SLIDE.C */

WORD graf_slidebox(tree, parent, obj, isvert)
OBJECT FAR *tree;
WORD parent;
WORD obj;
WORD isvert;
{
   GR_TREE   = tree;
   GR_PARENT = parent;
   GR_OBJ    = obj;
   GR_ISVERT = isvert;

   return( gem_if( GRAF_SLIDEBOX ) );
}

/* LIBMAN: SRC: HDR: NAME: GF_HANDL.C */

WORD graf_handle(pwchar, phchar, pwbox, phbox)
WORD FAR *pwchar;
WORD FAR *phchar;
WORD FAR *pwbox;
WORD FAR *phbox;
{
   gem_if(GRAF_HANDLE);

   *pwchar = GR_WCHAR ;
   *phchar = GR_HCHAR;
   *pwbox  = GR_WBOX;
   *phbox  = GR_HBOX;

   return((WORD) RET_CODE);
}

/* LIBMAN: SRC: HDR: NAME: GF_MOUSE.C */

WORD graf_mouse(m_number, m_addr)
WORD m_number;
MFORM FAR *m_addr;
{
   GR_MNUMBER = m_number;
   GR_MADDR   = m_addr;

   return( gem_if( GRAF_MOUSE ) );
}

/* LIBMAN: SRC: HDR: NAME: GF_MKST.C */

VOID graf_mkstate(pmx, pmy, pmstate, pkstate)
WORD FAR *pmx;
WORD FAR *pmy;
WORD FAR *pmstate;
WORD FAR *pkstate;
{
   gem_if( GRAF_MKSTATE );

   *pmx     = GR_MX;
   *pmy     = GR_MY;
   *pmstate = GR_MSTATE;
   *pkstate = GR_KSTATE;
}

/* LIBMAN: LIB: HDR: NAME: SCRP.C */

/*
 * Scrap Manager
 */

/* LIBMAN: SRC: HDR: NAME: SC_READ.C */

WORD scrp_read(pscrap)
BYTE FAR *pscrap;
{
   SC_PATH = pscrap;

   return( gem_if( SCRP_READ ) );
}

/* LIBMAN: SRC: HDR: NAME: SC_WRITE.C */

WORD scrp_write(pscrap)
BYTE FAR *pscrap;
{
   SC_PATH = pscrap;

   return( gem_if( SCRP_WRITE ) );
}

/* LIBMAN: SRC: HDR: NAME: SC_CLEAR.C */

WORD scrp_clear()
{
   return( gem_if( SCRP_CLEAR ) );
}

/* LIBMAN: LIB: HDR: NAME: FSEL.C */

/*
 * fseler Manager
 */

/* LIBMAN: SRC: HDR: NAME: FS_INPUT.C */

WORD fsel_input(pipath, pisel, pbutton)
BYTE FAR *pipath;
BYTE FAR *pisel;
WORD FAR *pbutton;
{
   FS_IPATH = pipath;
   FS_ISEL  = pisel;

   gem_if( FSEL_INPUT );

   *pbutton = FS_BUTTON;

   return((WORD) RET_CODE );
}

/* LIBMAN: LIB: HDR: NAME: WIND.C */

/*
 * Window Manager
 */

/* LIBMAN: SRC: HDR: NAME: WN_CREAT.C */

WORD wind_create(kind, wx, wy, ww, wh)
UWORD kind;
WORD wx, wy, ww, wh;
{
   WM_KIND = kind;
   WM_WX   = wx;
   WM_WY   = wy;
   WM_WW   = ww;
   WM_WH   = wh;

   return( gem_if( WIND_CREATE ) );
}

/* LIBMAN: SRC: HDR: NAME: WN_OPEN.C */

WORD wind_open(handle, wx, wy, ww, wh)
WORD handle;
WORD wx, wy, ww, wh;
{
   WM_HANDLE = handle;
   WM_WX     = wx;
   WM_WY     = wy;
   WM_WW     = ww;
   WM_WH     = wh;

   return( gem_if( WIND_OPEN ) );
}

/* LIBMAN: SRC: HDR: NAME: WN_CLOSE.C */

WORD wind_close(handle)
WORD handle;
{
   WM_HANDLE = handle;

   return( gem_if( WIND_CLOSE ) );
}

/* LIBMAN: SRC: HDR: NAME: WN_DELET.C */

WORD wind_delete(handle)
WORD handle;
{
   WM_HANDLE = handle;

   return( gem_if( WIND_DELETE ) );
}

/* LIBMAN: SRC: HDR: NAME: WN_GET.C */

WORD wind_get(w_handle, w_field, pw1, pw2, pw3, pw4)
WORD w_handle;
WORD w_field;
WORD FAR *pw1;
WORD FAR *pw2;
WORD FAR *pw3;
WORD FAR *pw4;
{
   WM_HANDLE = w_handle;
   WM_WFIELD = w_field;

   gem_if( WIND_GET );

   *pw1 = WM_OX;
   *pw2 = WM_OY;
   *pw3 = WM_OW;
   *pw4 = WM_OH;

   return((WORD) RET_CODE );
}

/* LIBMAN: SRC: HDR: NAME: WN_SET.C */

WORD wind_set(w_handle, w_field, w2, w3, w4, w5)
WORD w_handle;   
WORD w_field;
WORD w2, w3, w4, w5;
{
   WM_HANDLE = w_handle;
   WM_WFIELD = w_field;

   WM_IX = w2;
   WM_IY = w3;
   WM_IW = w4;
   WM_IH = w5;

   return( gem_if( WIND_SET ) );
}

/* LIBMAN: SRC: HDR: NAME: WN_FIND.C */

WORD wind_find(mx, my)
WORD mx, my;
{
   WM_MX = mx;
   WM_MY = my;

   return( gem_if( WIND_FIND ) );
}

/* LIBMAN: SRC: HDR: NAME: WN_UPDAT.C */

WORD wind_update(beg_update)
WORD beg_update;
{
   WM_BEGUP = beg_update;

   return( gem_if( WIND_UPDATE ) );
}

/* LIBMAN: SRC: HDR: NAME: WN_CALC.C */

WORD wind_calc(wctype, kind, x, y, w, h, px, py, pw, ph)
WORD wctype;
UWORD kind;
WORD x, y, w, h;
WORD FAR *px;
WORD FAR *py;
WORD FAR *pw;
WORD FAR *ph;
{
   WM_WCTYPE = wctype;
   WM_WCKIND = kind;
   WM_WCIX   = x;
   WM_WCIY   = y;
   WM_WCIW   = w;
   WM_WCIH   = h;

   gem_if( WIND_CALC );

   *px = WM_WCOX;
   *py = WM_WCOY;
   *pw = WM_WCOW;
   *ph = WM_WCOH;

   return((WORD) RET_CODE );
}

/* LIBMAN: LIB: HDR: NAME: RSRC.C */

/*
 * Resource Manager
 */

/* LIBMAN: SRC: HDR: NAME: RS_LOAD.C */

WORD rsrc_load(rsname)
BYTE FAR *rsname;
{
   RS_PFNAME = rsname;

   return( gem_if(RSRC_LOAD) );
}

/* LIBMAN: SRC: HDR: NAME: RS_FREE.C */

WORD rsrc_free()
{
   return( gem_if( RSRC_FREE ) );
}

/* LIBMAN: SRC: HDR: NAME: RS_GADDR.C */

WORD rsrc_gaddr(rstype, rsid, paddr)
WORD rstype;
WORD rsid;
VOID FAR *paddr;
{
   LONG FAR *l = (LONG FAR *)paddr; /* This is done because of small memory 
                                                                        model */

   RS_TYPE  = rstype;
   RS_INDEX = rsid;

   gem_if(RSRC_GADDR);

   *l = (LONG)RS_OUTADDR;

   return((WORD) RET_CODE );
}

/* LIBMAN: SRC: HDR: NAME: RS_SADDR.C */

WORD rsrc_saddr(rstype, rsid, lngval)
WORD rstype;
WORD rsid;
VOID FAR *lngval;
{
   RS_TYPE   = rstype;
   RS_INDEX  = rsid;
   RS_INADDR = lngval;
   return( gem_if(RSRC_SADDR) );
}

/* LIBMAN: SRC: HDR: NAME: RS_OBFIX.C */

WORD rsrc_obfix(tree, obj)
OBJECT FAR *tree;
WORD obj;
{
   RS_TREE = tree;
   RS_OBJ  = obj;

   return( gem_if(RSRC_OBFIX) );
}

/* LIBMAN: LIB: HDR: NAME: SHEL.C */

/*
 * Shell Manager
 */

/* LIBMAN: SRC: HDR: NAME: SH_READ.C */

WORD shel_read(pcmd, ptail)
BYTE FAR *pcmd;
BYTE FAR *ptail;
{
   SH_PCMD  = pcmd;
   SH_PTAIL = ptail;

   return( gem_if( SHEL_READ ) );
}

/* LIBMAN: SRC: HDR: NAME: SH_WRITE.C */

WORD shel_write(doex, isgr, iscr, pcmd, ptail)
WORD doex, isgr, iscr;
BYTE FAR *pcmd;
BYTE FAR *ptail;
{
   SH_DOEX  = doex;
   SH_ISGR  = isgr;
   SH_ISCR  = iscr;
   SH_PCMD  = pcmd;
   SH_PTAIL = ptail;

   return( gem_if( SHEL_WRITE ) );
}

/* LIBMAN: SRC: HDR: NAME: SH_GET.C */

WORD shel_get(pbuffer, len)
BYTE FAR *pbuffer;
WORD len;
{
   SH_PBUFFER = pbuffer;
   SH_LEN     = len;

   return( gem_if( SHEL_GET ) );
}

/* LIBMAN: SRC: HDR: NAME: SH_PUT.C */

WORD shel_put(pbuffer, len)
BYTE FAR *pbuffer;
WORD len;
{
   SH_PBUFFER = pbuffer;
   SH_LEN     = len;

   return( gem_if( SHEL_PUT ) );
}

/* LIBMAN: SRC: HDR: NAME: SH_FIND.C */

WORD shel_find(ppath)
BYTE FAR *ppath;
{
   SH_PATH = ppath;

   return( gem_if( SHEL_FIND ) );
}

/* LIBMAN: SRC: HDR: NAME: SH_ENVRN.C */

WORD shel_envrn(ppath, psrch)
BYTE FAR * FAR *ppath;
BYTE FAR *psrch;
{
   SH_PATH = ppath;
   SH_SRCH = psrch;

   return( gem_if( SHEL_ENVRN ) );
}

/* LIBMAN: SRC: HDR: NAME: SH_RDEF.C */

WORD shel_rdef(lpcmd, lpdir)
BYTE FAR *lpcmd;
BYTE FAR *lpdir;
{
   SH_LPCMD = lpcmd;
   SH_LPDIR = lpdir;

   return( gem_if( SHEL_RDEF ) );
}

/* LIBMAN: SRC: HDR: NAME: SH_WDEF.C */

WORD shel_wdef(lpcmd, lpdir)
BYTE FAR *lpcmd;
BYTE FAR *lpdir;
{
   SH_LPCMD = lpcmd;
   SH_LPDIR = lpdir;

   return( gem_if( SHEL_WDEF ) );
}

/* LIBMAN: LIB: HDR: NAME: XGRF.C */

/*
 * xgrf-Library
 */

/* LIBMAN: SRC: HDR: NAME: XG_STEP.C */

WORD xgrf_stepcalc(orgw, orgh, xc, yc, w, h, pcx, pcy, pcnt, pxstep, pystep)
WORD orgw, orgh;
WORD xc, yc, w, h;
WORD FAR *pcx;
WORD FAR *pcy;
WORD FAR *pcnt;
WORD FAR *pxstep;
WORD FAR *pystep;
{
   XGR_I1 = orgw;
   XGR_I2 = orgh;
   XGR_I3 = xc;
   XGR_I4 = yc;
   XGR_I5 = w;
   XGR_I6 = h;

   gem_if( XGRF_STEPCALC );

   *pcx    = XGR_O1;
   *pcy    = XGR_O2;
   *pcnt   = XGR_O3;
   *pxstep = XGR_O4;
   *pystep = XGR_O5;

   return((WORD) RET_CODE );
}

/* LIBMAN: SRC: HDR: NAME: XG_2BOX.C */

WORD xgrf_2box( xc, yc, w, h, corners, cnt, xstep, ystep, doubled)
WORD xc, yc, w, h;
WORD corners;
WORD cnt;
WORD xstep, ystep;
WORD doubled;
{
   XGR_I1 = cnt;
   XGR_I2 = xstep;
   XGR_I3 = ystep;
   XGR_I4 = doubled;
   XGR_I5 = corners;
   XGR_I6 = xc;
   XGR_I7 = yc;
   XGR_I8 = w;
   XGR_I9 = h;

   return( gem_if( XGRF_2BOX ) );
}

/*  AESBIND.C  */
